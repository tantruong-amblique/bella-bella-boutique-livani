{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, useCallback } from \"react\";\n\nfunction useForm(stateSchema, validationSchema = {}, callback) {\n  const {\n    0: state,\n    1: setState\n  } = useState(stateSchema);\n  const {\n    0: disable,\n    1: setDisable\n  } = useState(true);\n  const {\n    0: isDirty,\n    1: setIsDirty\n  } = useState(false);\n  useEffect(() => {\n    setDisable(true);\n  }, []);\n  useEffect(() => {\n    if (isDirty) {\n      setDisable(validateState());\n    }\n  }, [state, isDirty]); // Used to disable submit button if there's an error in state\n  // or the required field in state has no value.\n  // Wrapped in useCallback to cached the function to avoid instensive memory leaked\n  // in every re-render in component\n\n  const validateState = useCallback(() => {\n    const hasErrorInState = Object.keys(validationSchema).some(key => {\n      const isInputFieldRequired = validationSchema[key].required; // Get state value\n\n      const stateValue = state[key].value;\n      const stateError = state[key].error;\n      return isInputFieldRequired && !stateValue || stateError;\n    });\n    return hasErrorInState;\n  }, [state, validationSchema]);\n\n  function handleOnChange(event) {\n    setIsDirty(true);\n    const name = event.target.name;\n    const value = event.target.value;\n    let error = \"\";\n\n    if (validationSchema[name].required) {\n      if (!value) {\n        error = \"This is required field.\";\n      }\n    }\n\n    if (validationSchema[name].validator !== null && typeof validationSchema[name].validator === \"object\") {\n      if (validationSchema[name].validator.regEx) {\n        if (value && !validationSchema[name].validator.regEx.test(value)) {\n          error = validationSchema[name].validator.error;\n        }\n      }\n    }\n\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [name]: {\n        value,\n        error\n      }\n    }));\n  }\n\n  function handleOnSubmit(event) {\n    event.preventDefault(); // Making sure that validateState returns false\n    // Before calling the submit callback function\n\n    if (!validateState()) {\n      callback();\n    }\n  }\n\n  return {\n    state,\n    disable,\n    handleOnChange,\n    handleOnSubmit\n  };\n}\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/livani-react-next-ecommerce-template/livani-react/components/Checkout/userForm.js"],"names":["useState","useEffect","useCallback","useForm","stateSchema","validationSchema","callback","state","setState","disable","setDisable","isDirty","setIsDirty","validateState","hasErrorInState","Object","keys","some","key","isInputFieldRequired","required","stateValue","value","stateError","error","handleOnChange","event","name","target","validator","regEx","test","prevState","handleOnSubmit","preventDefault"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nfunction useForm(stateSchema, validationSchema = {}, callback) {\n    const [state, setState] = useState(stateSchema);\n    const [disable, setDisable] = useState(true);\n    const [isDirty, setIsDirty] = useState(false);\n\n    useEffect(() => {\n        setDisable(true);\n    }, []);\n\n    useEffect(() => {\n        if (isDirty) {\n            setDisable(validateState());\n        }\n    }, [state, isDirty]);\n\n    // Used to disable submit button if there's an error in state\n    // or the required field in state has no value.\n    // Wrapped in useCallback to cached the function to avoid instensive memory leaked\n    // in every re-render in component\n    const validateState = useCallback(() => {\n        const hasErrorInState = Object.keys(validationSchema).some(key => {\n            const isInputFieldRequired = validationSchema[key].required;\n            // Get state value\n            const stateValue = state[key].value;\n            const stateError = state[key].error;\n\n            return (isInputFieldRequired && !stateValue) || stateError;\n        });\n\n        return hasErrorInState;\n    }, [state, validationSchema]);\n\n    function handleOnChange(event) {\n        setIsDirty(true);\n\n        const name = event.target.name;\n        const value = event.target.value;\n\n        let error = \"\";\n        if (validationSchema[name].required) {\n            if (!value) {\n                error = \"This is required field.\";\n            }\n        }\n\n        if (\n            validationSchema[name].validator !== null &&\n            typeof validationSchema[name].validator === \"object\"\n        ) {\n            if (validationSchema[name].validator.regEx){\n                if (value && !validationSchema[name].validator.regEx.test(value)) {\n                    error = validationSchema[name].validator.error;\n                }\n            }\n        }\n\n        setState(prevState => ({\n            ...prevState,\n            [name]: { value, error }\n        }));\n    }\n\n    function handleOnSubmit(event) {\n        event.preventDefault();\n\n        // Making sure that validateState returns false\n        // Before calling the submit callback function\n        if (!validateState()) {\n            callback();\n        }\n    }\n\n    return { state, disable, handleOnChange, handleOnSubmit };\n}\n\nexport default useForm;"]},"metadata":{},"sourceType":"module"}